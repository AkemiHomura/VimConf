" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker:
"
" }

" Basics {
set fileencodings=utf-8,ucs-bom,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set nospell     " spell check off

set lazyredraw
set nocursorline

color molokai

set scrolljump=8
set scrolloff=5

set wrap        " wrap long lines
au FileType go set wm=2

" disable all scroll bars
set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=L

set laststatus=2 " Always display the statusline in all windows
"set showtabline=2 " Always display the tabline, even if there is only one tab
set noshowmode

syntax sync minlines=256
syntax sync maxlines=2048

if has('gui_running')
    set columns=106        " 80 columns
endif

" fonts
if OSX() && has("gui_running")
    set guifont=Source\ Code\ Pro:h15,Andale\ Mono\ Regular:h12,Menlo\ Regular:h11,Consolas\ Regular:h12,Courier\ New\ Regular:h12
endif

" filetypes
au FileType javascript,html set nonumber    " set no line number when opening a javascript or html file

au FileType html,javascript,yaml,proto,toml,json set tabstop=2
au FileType html,javascript,yaml,proto,toml,json set softtabstop=2
au FileType html,javascript,yaml,proto,toml,json set shiftwidth=2

au FileType cpp let g:indent_guides_exclude_filetypes=['cpp']

" C/Cpp indent
" set cino=N-sg0.5sh0.5sl1
" }

" Plugins {
" java completion2 {
if isdirectory(expand("~/.vim/bundle/vim-javacomplete2"))
    au FileType java set omnifunc=javacomplete#Complete 
    nmap <F4> <Plug>(JavaComplete-Imports-AddSmart)
    imap <F4> <Plug>(JavaComplete-Imports-AddSmart)
    nmap <F5> <Plug>(JavaComplete-Imports-Add)
    imap <F5> <Plug>(JavaComplete-Imports-Add)
    nmap <F6> <Plug>(JavaComplete-Imports-AddMissing)
    imap <F6> <Plug>(JavaComplete-Imports-AddMissing)
    nmap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
    imap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
endif
" }

" vim formats {
if isdirectory(expand("~/.vim/bundle/vim-autoformat"))
    let g:formatters_java = ['clangformat', 'astyle_java']
    let g:formatters_python = ['yapf', 'autopep8']
    let g:formatter_yapf_style = 'pep8'
    au FileType c,cpp,java,python,protobuf map = :Autoformat<CR>
    au FileType go map = :GoFmt<CR>
endif
" }

" YCM {
    let g:ycm_key_invoke_completion = '<C-UP>'
    autocmd FileType cpp let g:ycm_global_ycm_extra_conf = '~/.spf13-vim-3/.ycm_extra_conf_cpp.py'
    autocmd FileType c let g:ycm_global_ycm_extra_conf = '~/.spf13-vim-3/.ycm_extra_conf_c.py'
    let g:ycm_confirm_extra_conf = 0
    "let g:ycm_filepath_completion_use_working_dir=1
" }

" easytags {
if isdirectory(expand("~/.vim/bundle/vim-easytags"))
    "let g:easytags_dynamic_files = 1 "Turned off due to the large qt tag file
    let g:easytags_auto_highlight = 0
    let g:easytags_auto_update = 0
    let g:easytags_file = '~/.vimtags'
    let g:easytags_async = 1

    let g:easytags_dynamic_files = 2
    set tags=./.tags;,~/.vimtags
endif
" }

" python {
    let g:pymode_python = 'python3'
    let g:pymode_lint = 0
    "let b:python_version2 = 0
    "let g:python_highlight_all = 1
    let g:ycm_python_binary_path = 'python3'
    " Reset the default syntastic python checker, default is python2
    " Pymode will take control of it
    let g:syntastic_python_checkers = []
    let g:pymode_folding = 0
    let pymode_rope_completion = 0
" }

" ale {
if isdirectory(expand("~/.vim/bundle/ale"))
    let g:ale_enabled = 0
    au Filetype python let g:ale_enabled = 1
    let g:ale_emit_conflict_warnings = 0
endif
" }

" syntastic {
if isdirectory(expand("~/.vim/bundle/syntastic"))
    let g:syntastic_cpp_compiler = 'clang++' "change the compiler to g++ to support c++11
    let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libc++' "set the options of g++ to support c++11

    noremap <leader>S :SyntasticCheck<CR>

    let g:syntastic_auto_loc_list = 1

    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0

    let g:syntastic_go_checkers = ['go']

    let g:syntastic_mode_map = { 'mode': 'passive' }

    function! SyntasticCheckHook(errors)
        if !empty(a:errors)
            let g:syntastic_loc_list_height = min([len(a:errors), 10])
        endif
    endfunction
endif
" }

" easymotion {
if isdirectory(expand("~/.vim/bundle/vim-easymotion"))
    map  / <Plug>(easymotion-sn)
    omap / <Plug>(easymotion-tn)
    map  n <Plug>(easymotion-next)
    map  N <Plug>(easymotion-prev)

    map <Leader>l <Plug>(easymotion-lineforward)
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
    map <Leader>h <Plug>(easymotion-linebackward)
endif
" }

" golang {
if count(g:spf13_bundle_groups, 'go')
    au FileType go nunmap <leader>gv
    au FileType go nmap <leader>gv <Plug>(go-def-vertical)

    let g:go_fmt_autosave = 0
endif
" }

" nerdcommenter {
if isdirectory(expand("~/.vim/bundle/nerdcommenter"))
    " set qml & qmake comment for NERD Commenter
    let g:NERDCustomDelimiters = {
                \ 'qmake': {'left': '#'},
                \ 'qml': {'left': '//', 'leftAlt': '/*', 'rightAlt': '*/'}
                \}
    " Add spaces after comment delimiters by default
    let g:NERDSpaceDelims = 1
    au Filetype python let g:NERDSpaceDelims = 0 " Disable in python
    " Use compact syntax for prettified multi-line comments
    let g:NERDCompactSexyComs = 1
    " Align line-wise comment delimiters flush left instead of following code indentation
    let g:NERDDefaultAlign = 'left'
    " Allow commenting and inverting empty lines (useful when commenting a region)
    let g:NERDCommentEmptyLines = 1
    " Enable trimming of trailing whitespace when uncommenting
    let g:NERDTrimTrailingWhitespace = 1
endif
" }

" nerdTree {
if isdirectory(expand("~/.vim/bundle/nerdtree"))
    let NERDTreeQuitOnOpen=0
endif
" }

" indent guides {
if isdirectory(expand("~/.vim/bundle/vim-indent-guides"))
    let g:indent_guides_exclude_filetypes = ['go', 'startify']
endif
" }

" vim markdown {
if isdirectory(expand("~/.vim/bundle/vim-markdown"))
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_toml_frontmatter = 1
    let g:vim_markdown_json_frontmatter = 1
    let g:vim_markdown_conceal = 0
endif
" }

" Others {
" map ',z' to ':Dash' if dash.vim is loaded
au VimEnter * if exists(':Dash') | exe "map <leader>z :Dash<CR>" | endif

nmap <leader>a= :Tabularize<CR>

nmap <F8> :TagbarToggle<CR>

" disable auto pair fly mode
let g:AutoPairsFlyMode = 0
" }
" }
