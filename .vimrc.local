set nospell     " spell check off
au FileType javascript,html set nonumber    " set no line number when opening a javascript or html file

set scrolljump=8
set scrolloff=5

set wrap        " wrap long lines

" set qml & qmake comment for NERD Commenter
let g:NERDCustomDelimiters = {
    \ 'qmake': {'left': '#'},
    \ 'qml': {'left': '//', 'leftAlt': '/*', 'rightAlt': '*/'}
    \}

let g:syntastic_cpp_compiler = 'g++' "change the compiler to g++ to support c++11
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libc++' "set the options of g++ to support c++11
autocmd FileType cpp let g:ycm_global_ycm_extra_conf = '~/.spf13-vim-3/.ycm_extra_conf_cpp.py'
autocmd FileType c let g:ycm_global_ycm_extra_conf = '~/.spf13-vim-3/.ycm_extra_conf_c.py'
"let g:ycm_filepath_completion_use_working_dir=1

"let g:easytags_dynamic_files = 1 "Turned off due to the large qt tag file
let g:easytags_auto_highlight = 0
let g:easytags_auto_update = 0
let g:easytags_file = '~/.vimtags'
let g:easytags_async = 1

set tags=./.tags;,~/Documents/.qtvtags;,~/.vimtags

map <Leader>/ <Plug>(easymotion-sn)

set laststatus=2 " Always display the statusline in all windows
"set showtabline=2 " Always display the tabline, even if there is only one tab
set noshowmode

colorscheme PaperColor

syntax sync minlines=256
syntax sync maxlines=2048

set lazyredraw

nmap <F8> :TagbarToggle<CR>

let g:ycm_key_invoke_completion = '<C-UP>'

let g:AutoPairsFlyMode = 1

if has('gui_running')
    set lines=60        " 60 lines of text
    let g:AutoPairsShortcutBackInsert = '<A-i>'
    inoremap <A-h> <Esc>h
    inoremap <A-j> <Esc>j
    inoremap <A-k> <Esc>k
    inoremap <A-l> <Esc>l
    inoremap <A-u> <Esc>u
    inoremap <A-o> <Esc>o
else 
    let g:AutoPairsShortcutBackInsert = 'i'
endif

let g:go_fmt_autosave = 0

" Set noexpandtab with speicific filetype
"autocmd FileType markdown set noexpandtab

"let g:airline_powerline_fonts=1
"set timeoutlen=50
"let g:airline#extensions#tabline#enabled=1
"let g:airline_theme='solarized'
"
if has("gui_running")
  function! ScreenFilename()
    if has('amiga')
      return "s:.vimsize"
    elseif has('win32')
      return $HOME.'\_vimsize'
    else
      return $HOME.'/.vimsize'
    endif
  endfunction

  function! ScreenRestore()
    " Restore window size (columns and lines) and position
    " from values stored in vimsize file.
    " Must set font first so columns and lines are based on font size.
    let f = ScreenFilename()
    if has("gui_running") && g:screen_size_restore_pos && filereadable(f)
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      for line in readfile(f)
        let sizepos = split(line)
        if len(sizepos) == 5 && sizepos[0] == vim_instance
          silent! execute "set columns=".sizepos[1]." lines=".sizepos[2]
          silent! execute "winpos ".sizepos[3]." ".sizepos[4]
          return
        endif
      endfor
    endif
  endfunction

  function! ScreenSave()
    " Save window size and position.
    if has("gui_running") && g:screen_size_restore_pos
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      let data = vim_instance . ' ' . &columns . ' ' . &lines . ' ' .
            \ (getwinposx()<0?0:getwinposx()) . ' ' .
            \ (getwinposy()<0?0:getwinposy())
      let f = ScreenFilename()
      if filereadable(f)
        let lines = readfile(f)
        call filter(lines, "v:val !~ '^" . vim_instance . "\\>'")
        call add(lines, data)
      else
        let lines = [data]
      endif
      call writefile(lines, f)
    endif
  endfunction

  if !exists('g:screen_size_restore_pos')
    let g:screen_size_restore_pos = 1
  endif
  if !exists('g:screen_size_by_vim_instance')
    let g:screen_size_by_vim_instance = 1
  endif
  autocmd VimEnter * if g:screen_size_restore_pos == 1 | call ScreenRestore() | endif
  autocmd VimLeavePre * if g:screen_size_restore_pos == 1 | call ScreenSave() | endif
endif
