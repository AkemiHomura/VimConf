diff --git a/UltiSnips/cpp.snippets b/UltiSnips/cpp.snippets
index bb79a0e..0816825 100644
--- a/UltiSnips/cpp.snippets
+++ b/UltiSnips/cpp.snippets
@@ -108,3 +108,188 @@ ${1:ReturnType} ${2:FunctionName}(${3:param})
 }
 endsnippet
 # vim:ft=snippets:
+
+# custom
+snippet bits/stdc++.h "bits/stdc++.h from g++" b
+// #include <bits/stdc++.h>
+
+#include <cassert>
+#include <cctype>
+#include <cerrno>
+#include <cfloat>
+#include <ciso646>
+#include <climits>
+#include <clocale>
+#include <cmath>
+#include <csetjmp>
+#include <csignal>
+#include <cstdarg>
+#include <cstddef>
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include <ctime>
+
+#if __cplusplus >= 201103L
+#include <ccomplex>
+#include <cfenv>
+#include <cinttypes>
+#include <cstdbool>
+#include <cstdint>
+#include <ctgmath>
+#include <cwchar>
+#include <cwctype>
+#endif
+
+// C++
+#include <algorithm>
+#include <bitset>
+#include <complex>
+#include <deque>
+#include <exception>
+#include <fstream>
+#include <functional>
+#include <iomanip>
+#include <ios>
+#include <iosfwd>
+#include <iostream>
+#include <istream>
+#include <iterator>
+#include <limits>
+#include <list>
+#include <locale>
+#include <map>
+#include <memory>
+#include <new>
+#include <numeric>
+#include <ostream>
+#include <queue>
+#include <set>
+#include <sstream>
+#include <stack>
+#include <stdexcept>
+#include <streambuf>
+#include <string>
+#include <typeinfo>
+#include <utility>
+#include <valarray>
+#include <vector>
+
+#if __cplusplus >= 201103L
+#include <array>
+#include <atomic>
+#include <chrono>
+#include <codecvt>
+#include <condition_variable>
+#include <forward_list>
+#include <future>
+#include <initializer_list>
+#include <mutex>
+#include <random>
+#include <ratio>
+#include <regex>
+#include <scoped_allocator>
+#include <system_error>
+#include <thread>
+#include <tuple>
+#include <typeindex>
+#include <type_traits>
+#include <unordered_map>
+#include <unordered_set>
+#endif
+
+#if __cplusplus >= 201402L
+#include <shared_mutex>
+#endif
+endsnippet
+
+snippet namestd "using namespace std;" b
+using namespace std;
+endsnippet
+
+snippet graph_dirs "predefine graph dirs" b
+const vector<pair<int, int>> dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
+endsnippet
+
+snippet contest_header "predefined macro and header files" b
+#include <cstdio>
+#include <cstdlib>
+#include <iostream>
+#include <algorithm>
+#include <vector>
+#include <string>
+#include <stack>
+#include <cmath>
+#include <deque>
+#include <queue>
+#include <map>
+#include <bitset>
+#include <set>
+#include <list>
+#include <unordered_map>
+#include <unordered_set>
+#include <sstream>
+#include <numeric>
+#include <climits>
+#include <utility>
+#include <iomanip>
+#include <cassert>
+
+using namespace std;
+
+using ll = long long;
+using ii = pair<int, int>;
+using iii = pair<int, ii>;
+template<class T> using vv = vector<vector<T>>;
+
+#define rep(i, b) for (int i = 0; i < int(b); ++ i)
+#define reps(i, a, b) for (int i = int(a); i < int(b); ++ i)
+#define rrep(i, b) for (int i = int(b) - 1; i >= 0; -- i)
+#define rreps(i, a, b) for (int i = int(b) - 1; i >= a; -- i)
+#define repe(i, b) for (int i = 0; i <= int(b); ++ i)
+#define repse(i, a, b) for (int i = int(a); i <= int(b); ++ i)
+#define rrepe(i, b) for (int i = int(b); i >= 0; -- i)
+#define rrepse(i, a, b) for (int i = int(b); i >= int(a); -- i)
+
+#define all(a) a.begin(), a.end()
+#define rall(a) a.rbegin(), a.rend()
+#define sz(a) int(a.size())
+#define mp(a, b) make_pair(a, b)
+
+#define inf (INT_MAX / 2)
+#define infl (LONG_MAX / 2)
+#define infll (LLONG_MAX / 2)
+
+#define X first
+#define Y second
+#define pb push_back
+#define eb emplace_back
+
+// tools for pair<int, int> & graph
+template <class T, size_t M, size_t N>
+class graph_delegate_t {
+    T (&f)[M][N];
+
+public:
+    graph_delegate_t(T (&f)[M][N]) : f(f) {}
+    T& operator[](const ii& s) { return f[s.first][s.second]; }
+    const T& operator[](const ii& s) const { return f[s.first][s.second]; }
+};
+ii operator+(const ii& lhs, const ii& rhs) {
+    return mp(lhs.first + rhs.first, lhs.second + rhs.second);
+}
+
+// clang-format off
+template <class S, class T> ostream& operator<<(ostream& os, const pair<S, T>& t) { return os << "(" << t.first << "," << t.second << ")"; }
+template <class T> ostream& operator<<(ostream& os, const vector<T>& t) { os << "{"; rep(i, t.size() - 1) { os << t[i] << ","; } if (!t.empty()) os << t.back(); os << "}"; return os; }
+vector<string> __macro_split(const string& s) { vector<string> v; int d = 0, f = 0; string t; for (char c : s) { if (!d && c == ',') v.pb(t), t = ""; else t += c; if (c == '\"' || c == '\'') f ^= 1; if (!f && c == '(') ++d; if (!f && c == ')') --d; } v.pb(t); return v; }
+void __args_output(vector<string>::iterator, vector<string>::iterator) { cerr << endl; }
+template <typename T, typename... Args>
+void __args_output(vector<string>::iterator it, vector<string>::iterator end, T a, Args... args) { cerr << it->substr((*it)[0] == ' ', it->length()) << " = " << a; if (++it != end) { cerr << ", "; } __args_output(it, end, args...); }
+#define out(args...) { vector<string> __args = __macro_split(#args); __args_output(__args.begin(), __args.end(), args); }
+// clang-format on
+
+int main() {
+	return 0;
+}
+endsnippet
diff --git a/UltiSnips/django.snippets b/UltiSnips/django.snippets
index 8f83628..d6e2d43 100644
--- a/UltiSnips/django.snippets
+++ b/UltiSnips/django.snippets
@@ -292,25 +292,25 @@ endsnippet
 
 snippet createview "Generic Create View" b
 class ${1:MODEL_NAME}CreateView(CreateView):
-	model = ${1:MODEL_NAME}
+	model = $1
 	template_name = "${2:TEMPLATE_NAME}"
 endsnippet
 
 snippet deleteview "Generic Delete View" b
 class ${1:MODEL_NAME}DeleteView(DeleteView):
-	model = ${1:MODEL_NAME}
+	model = $1
 	template_name = "${2:TEMPLATE_NAME}"
 endsnippet
 
 snippet detailview "Generic Detail View" b
 class ${1:MODEL_NAME}DetailView(DetailView):
-	model = ${1:MODEL_NAME}
+	model = $1
 	template_name = "${2:TEMPLATE_NAME}"
 endsnippet
 
 snippet listview "Generic List View" b
 class ${1:MODEL_NAME}ListView(ListView):
-	model = ${1:MODEL_NAME}
+	model = $1
 	template_name = "${2:TEMPLATE_NAME}"
 endsnippet
 
@@ -345,7 +345,7 @@ endsnippet
 
 snippet updateview "Generic Update View" b
 class ${1:MODEL_NAME}UpdateView(UpdateView):
-	model = ${1:MODEL_NAME}
+	model = $1
 	template_name = "${2:TEMPLATE_NAME}"
 endsnippet
 
diff --git a/UltiSnips/elm.snippets b/UltiSnips/elm.snippets
new file mode 100644
index 0000000..6e21bb5
--- /dev/null
+++ b/UltiSnips/elm.snippets
@@ -0,0 +1,9 @@
+priority -50
+
+snippet impa "Qualified import"
+import ${1:Json.Encode} as ${0:`!p snip.rv = t[1].split(".")[-1]`}
+endsnippet
+
+snippet impae "Qualified import with exposing"
+import ${1:Json.Encode} as ${2:`!p snip.rv = t[1].split(".")[-1]`} exposing (${0:Value})
+endsnippet
diff --git a/UltiSnips/haskell.snippets b/UltiSnips/haskell.snippets
new file mode 100644
index 0000000..11d82c8
--- /dev/null
+++ b/UltiSnips/haskell.snippets
@@ -0,0 +1,5 @@
+priority -50
+
+snippet impq "Qualified import"
+import qualified ${1:Data.Text} as ${0:`!p snip.rv = t[1].split(".")[-1]`}
+endsnippet
diff --git a/UltiSnips/markdown.snippets b/UltiSnips/markdown.snippets
index add9f7f..0c844ec 100644
--- a/UltiSnips/markdown.snippets
+++ b/UltiSnips/markdown.snippets
@@ -3,7 +3,7 @@ priority -50
 global !p
 def create_table(snip):
     # retrieving single line from current string and treat it like tabstops count
-    placeholders_string = snip.buffer[snip.line].strip().split("x",1)
+    placeholders_string = snip.buffer[snip.line].strip()[2:].split("x",1)
     rows_amount = int(placeholders_string[0])
     columns_amount = int(placeholders_string[1])
 
@@ -84,9 +84,8 @@ snippet fnt "Footnote"
 [^$1]:${2:Text}
 endsnippet
 
-post_jump "create_table(snip)"
+pre_expand "create_table(snip)"
 snippet "tb(\d+x\d+)" "Customizable table" br
-`!p snip.rv = match.group(1)`
 endsnippet
 
 # vim:ft=snippets:
diff --git a/UltiSnips/r.snippets b/UltiSnips/r.snippets
index 44624b3..f81b0c9 100644
--- a/UltiSnips/r.snippets
+++ b/UltiSnips/r.snippets
@@ -1,4 +1,4 @@
-priority -50
+priority -20
 
 global !p
 import os
@@ -38,63 +38,63 @@ library("${3:${2/^(\w+)_.*$/(?1:$1)/ga}}")
 endsnippet
 
 snippet lib "Import a library"
-library(${0:package})
+library('${0:${VISUAL:package}}')
 endsnippet
 
 snippet req "Require a file"
-require(${0:package})
+require('${0:${VISUAL:package}}')
 endsnippet
 
 snippet source "Source a file"
-source('${0:file}')
+source('${0:${VISUAL:file}}')
 endsnippet
 
 snippet if "If statement"
 if ($1) {
-	$0
+	${0:${VISUAL}}
 }
 endsnippet
 
 snippet eif "Else-If statement"
 else if ($1) {
-	$0
+	${0:${VISUAL}}
 }
 endsnippet
 
 snippet el "Else statement"
 else {
-	$0
+	${0:${VISUAL}}
 }
 endsnippet
 
 snippet ife "if .. else"
 if ($1) {
-	$2
+	${2:${VISUAL}}
 } else {
-	$3
+	$0
 }
 endsnippet
 
 snippet wh "while loop"
 while($1) {
-	$2
+	${0:${VISUAL}}
 }
 endsnippet
 
 snippet for "for loop"
 for (${1:item} in ${2:list}) {
-	$3
+	${0:${VISUAL}}
 }
 endsnippet
 
 snippet fun "Function definition"
 ${1:name} <- function ($2) {
-	$0
+	${0:${VISUAL}}
 }
 endsnippet
 
 snippet ret "Return call"
-return($0)
+return(${0:${VISUAL}})
 endsnippet
 
 snippet df "Data frame"
@@ -102,51 +102,51 @@ ${1:name}[${2:rows}, ${0:cols}]
 endsnippet
 
 snippet c "c function"
-c(${0:items})
+c(${0:${VISUAL:items}})
 endsnippet
 
 snippet li "list function"
-list(${0:items})
+list(${0:${VISUAL:items}})
 endsnippet
 
 snippet mat "matrix function"
-matrix(${1:data}, nrow = ${2:rows}, ncol = ${0:cols})
+matrix(${1:${VISUAL:data}}, nrow = ${2:rows}, ncol = ${0:cols})
 endsnippet
 
 snippet apply "apply function"
-apply(${1:array}, ${2:margin}, ${0:function})
+apply(${1:${VISUAL:array}}, ${2:margin}, ${0:function})
 endsnippet
 
 snippet lapply "lapply function"
-lapply(${1:list}, ${0:function})
+lapply(${1:${VISUAL:list}}, ${0:function})
 endsnippet
 
 snippet sapply "sapply function"
-sapply(${1:list}, ${0:function})
+sapply(${1:${VISUAL:list}}, ${0:function})
 endsnippet
 
 snippet vapply "vapply function"
-vapply(${1:list}, ${2:function}, ${0:type})
+vapply(${1:${VISUAL:list}}, ${2:function}, ${0:type})
 endsnippet
 
 snippet mapply "mapply function"
-mapply(${1:function}, ${0:...})
+mapply(${1:${VISUAL:function}}, ${0:...})
 endsnippet
 
 snippet tapply "tapply function"
-tapply(${1:vector}, ${2:index}, ${0:function})
+tapply(${1:${VISUAL:vector}}, ${2:index}, ${0:function})
 endsnippet
 
 snippet rapply "rapply function"
-rapply(${1:list}, ${0:function})
+rapply(${1:${VISUAL:list}}, ${0:function})
 endsnippet
 
 snippet pl "Plot function"
-plot(${1:x}, ${0:y})
+plot(${1:${VISUAL:x}}, ${0:y})
 endsnippet
 
 snippet ggp "ggplot2 plot"
-ggplot(${1:data}, aes(${0:aesthetics}))
+ggplot(${1:${VISUAL:data}}, aes(${0:aesthetics}))
 endsnippet
 
 snippet fis "Fisher test"
@@ -176,3 +176,15 @@ endsnippet
 snippet kvt "KV test"
 kv.test(${1:x}, ${0:y})
 endsnippet
+
+#################################
+#  easily create string vector  #
+#################################
+# Given individual words separated by spaces
+# Select words (e.g. shift-v for whole line (such as the line above)
+# then press <Tab> then type "vec", press <Tab> again to get this:
+# var <- c("#","Given","individual","words","separated","by","spaces")
+# var <- c("#","type","out","individual","words","separated","by","spaces")
+snippet vec
+${1:var} <- c("${0:${VISUAL:/ /","/g}}")
+endsnippet
diff --git a/UltiSnips/rst.snippets b/UltiSnips/rst.snippets
index 9a2b4c0..efd8c86 100644
--- a/UltiSnips/rst.snippets
+++ b/UltiSnips/rst.snippets
@@ -41,6 +41,8 @@ INCLUDABLE_DIRECTIVES = ['image', 'figure', 'include']
 # http://stackoverflow.com/questions/2718196/find-all-chinese-text-in-a-string-using-python-and-regex
 CJK_RE = re.compile(u'[⺀-⺙⺛-⻳⼀-⿕々〇〡-〩〸-〺〻㐀-䶵一-鿃豈-鶴侮-頻並-龎]', re.UNICODE)
 
+#http://www.pygal.org/en/stable/documentation/types/index.html
+CHART_TYPES = ["Line", "StackedLine", "HorizontalLine", "Bar", "StackedBar", "HorizontalBar", "Histogram", "XY", "DateLine", "TimeLine", "TimeDeltaLine", "DateTimeLine", "Pie", "Radar", "Box", "Dot", "Funnel", "Gauge", "SolidGauge", "Pyramid", "Treemap"]
 
 def has_cjk(s):
 	"""Detect if s contains CJK characters."""
@@ -299,6 +301,19 @@ snippet fnt "Footnote or Citation" i
 .. [$1] ${2:Reference}
 endsnippet
 
+# Only for Nikola — Static Site Generator
+snippet chart "Pygal chart for Nikola" b
+.. chart:: $1`!p snip.rv=complete(t[1], CHART_TYPES)`
+	:title: '${2:Browser usage evolution (in %)}'
+	:x_labels: [${3:"2002", "2003", "2004", "2005", "2006", "2007"}]
+	
+	'Firefox', [None, None, 0, 16.6, 25, 31]
+	'Chrome',  [None, None, None, None, None, None]
+	'IE',      [85.8, 84.6, 84.7, 74.5, 66, 58.6]
+	'Others',  [14.2, 15.4, 15.3, 8.9, 9, 10.4]
+$0
+endsnippet
+
 ############
 #  Sphinx  #
 ############
diff --git a/UltiSnips/ruby.snippets b/UltiSnips/ruby.snippets
index c61b276..cb90a9d 100644
--- a/UltiSnips/ruby.snippets
+++ b/UltiSnips/ruby.snippets
@@ -302,7 +302,7 @@ endsnippet
 snippet "\b(case|sw(itch)?)" "case <variable> when <expression> ... end" r
 case ${1:variable}
 when ${2:expression}
-$0
+  $0
 end
 endsnippet
 
@@ -326,4 +326,16 @@ snippet ###
 =end
 endsnippet
 
+snippet priv "private " m
+private
+
+$0
+endsnippet
+
+snippet prot "protected" m
+protected
+
+$0
+endsnippet
+
 # vim: set ts=2 sw=2 expandtab:
diff --git a/snippets/elixir.snippets b/snippets/elixir.snippets
index 4b4ef39..4243910 100644
--- a/snippets/elixir.snippets
+++ b/snippets/elixir.snippets
@@ -88,7 +88,6 @@ snippet def
 snippet defd
 	@doc """
 	${1:doc string}
-
 	"""
 	def ${2:name} do
 		${0}
@@ -96,7 +95,6 @@ snippet defd
 snippet defsd
 	@doc """
 	${1:doc string}
-
 	"""
 	@spec ${2:name} :: ${3:no_return}
 	def ${2} do
@@ -127,8 +125,9 @@ snippet defr
 snippet doc
 	@doc """
 	${0}
-
 	"""
+snippet im
+	@impl true
 snippet docf
 	@doc false
 snippet fn
@@ -136,7 +135,6 @@ snippet fn
 snippet mdoc
 	@moduledoc """
 	${0}
-
 	"""
 snippet mdocf
 	@moduledoc false
@@ -197,3 +195,34 @@ snippet >i pipe to inspect
 	|> IO.inspect
 snippet >il pipe to inspect with label
 	|> IO.inspect(label: "${1:label}")
+snippet cs
+	@doc false
+	def child_spec(${1:_opts}) do
+		%{
+			id: __MODULE__,
+			start: {__MODULE__, :start_link, ${2:[]}},
+			restart: ${3::permanent},
+			shutdown: ${4:5000},
+			type: ${5::worker}
+		}
+	end
+snippet genserver basic genserver structure
+	use GenServer
+
+	@doc false
+	def start_link do
+		GenServer.start_link(__MODULE__, ${1:Map.new})
+	end
+
+	@impl true
+	def init(state) do
+		{:ok, state}
+	end
+snippet genserver: basic genserver structure
+	use GenServer
+
+	@doc false
+	def start_link, do: GenServer.start_link(__MODULE__, ${1:Map.new})
+
+	@impl true
+	def init(state), do: {:ok, state}
diff --git a/snippets/elm.snippets b/snippets/elm.snippets
index 6324eea..336ee09 100644
--- a/snippets/elm.snippets
+++ b/snippets/elm.snippets
@@ -2,9 +2,11 @@ snippet mod
 	module `substitute(substitute(expand('%:r'), '[/\\]','.','g'),'^\%(\l*\.\)\?','','')` exposing (${1})
 	${0}
 snippet imp
-	import ${0:List}
+	import ${0:Http}
 snippet impe
-	import ${1:List} exposing (${0:map})
+	import ${1:Html} exposing (${0:..})
+snippet impae
+	import ${1:Json.Encode} as ${2:Encode} exposing (${0:Value})
 snippet fn
 	${1:fn} : ${2:a} -> ${3:a}
 	$1 ${4} =
@@ -51,3 +53,6 @@ snippet tya
 		${0}
 snippet test
 	test "${1}" <| \_ -> $0
+snippet doc
+	{-| ${0}
+	-}
diff --git a/snippets/haskell.snippets b/snippets/haskell.snippets
index e4957e4..d073bf1 100644
--- a/snippets/haskell.snippets
+++ b/snippets/haskell.snippets
@@ -31,8 +31,12 @@ snippet importq
 snippet inst
 	instance ${1:Monoid} ${2:Type} where
 		${0}
+snippet ty
+	type ${1:Type} = ${0:Type}
 snippet type
 	type ${1:Type} = ${0:Type}
+snippet da
+	data ${1:Type} = ${2:$1} ${0:Int}
 snippet data
 	data ${1:Type} = ${2:$1} ${0:Int}
 snippet newtype
@@ -54,6 +58,12 @@ snippet const
 snippet fn
 	${1:fn} :: ${2:a} -> ${3:a}
 	$1 ${4} = ${0:undefined}
+snippet fn0
+	${1:fn} :: ${2:a}
+	$1 = ${0:undefined}
+snippet fn1
+	${1:fn} :: ${2:a} -> ${3:a}
+	$1 ${4} = ${0:undefined}
 snippet fn2
 	${1:fn} :: ${2:a} -> ${3:a} -> ${4:a}
 	$1 ${5} = ${0:undefined}
@@ -103,7 +113,22 @@ snippet spec
 	spec :: Spec
 	spec =
 		describe "${1}" $ do
-			$0
+			it "${2}" $
+				$0
+snippet specf
+	module `substitute(substitute(expand('%:r'), '[/\\]','.','g'),'^\%(\l*\.\)\?','','')` (main, spec) where
+
+	import Test.Hspec
+	import Test.Hspec.Runner (configFastFail, defaultConfig, hspecWith)
+
+	main :: IO ()
+	main = hspecWith defaultConfig {configFastFail = True} spec
+
+	spec :: Spec
+	spec =
+		describe "${1}" $ do
+			it "${2}" $
+				$0
 snippet desc
 	describe "${1}" $ do
 		$0
@@ -113,3 +138,8 @@ snippet it
 snippet itp
 	it "${1}" $ property $
 		$0
+snippet sb
+	\`shouldBe\` $0
+snippet doc
+	{-| ${0}
+	-}
diff --git a/snippets/python.snippets b/snippets/python.snippets
index 9e35a2f..6bd1513 100644
--- a/snippets/python.snippets
+++ b/snippets/python.snippets
@@ -181,6 +181,11 @@ snippet testcase
 
 		def test_${2:description}(self):
 			${0}
+# test given when then
+snippet tgwt
+	# given: ${1}
+	# when: ${2}
+	# then: ${3}
 snippet fut
 	from __future__ import ${0}
 #getopt
