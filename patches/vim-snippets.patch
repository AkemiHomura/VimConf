diff --git a/UltiSnips/cpp.snippets b/UltiSnips/cpp.snippets
index bb79a0e..0816825 100644
--- a/UltiSnips/cpp.snippets
+++ b/UltiSnips/cpp.snippets
@@ -108,3 +108,188 @@ ${1:ReturnType} ${2:FunctionName}(${3:param})
 }
 endsnippet
 # vim:ft=snippets:
+
+# custom
+snippet bits/stdc++.h "bits/stdc++.h from g++" b
+// #include <bits/stdc++.h>
+
+#include <cassert>
+#include <cctype>
+#include <cerrno>
+#include <cfloat>
+#include <ciso646>
+#include <climits>
+#include <clocale>
+#include <cmath>
+#include <csetjmp>
+#include <csignal>
+#include <cstdarg>
+#include <cstddef>
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include <ctime>
+
+#if __cplusplus >= 201103L
+#include <ccomplex>
+#include <cfenv>
+#include <cinttypes>
+#include <cstdbool>
+#include <cstdint>
+#include <ctgmath>
+#include <cwchar>
+#include <cwctype>
+#endif
+
+// C++
+#include <algorithm>
+#include <bitset>
+#include <complex>
+#include <deque>
+#include <exception>
+#include <fstream>
+#include <functional>
+#include <iomanip>
+#include <ios>
+#include <iosfwd>
+#include <iostream>
+#include <istream>
+#include <iterator>
+#include <limits>
+#include <list>
+#include <locale>
+#include <map>
+#include <memory>
+#include <new>
+#include <numeric>
+#include <ostream>
+#include <queue>
+#include <set>
+#include <sstream>
+#include <stack>
+#include <stdexcept>
+#include <streambuf>
+#include <string>
+#include <typeinfo>
+#include <utility>
+#include <valarray>
+#include <vector>
+
+#if __cplusplus >= 201103L
+#include <array>
+#include <atomic>
+#include <chrono>
+#include <codecvt>
+#include <condition_variable>
+#include <forward_list>
+#include <future>
+#include <initializer_list>
+#include <mutex>
+#include <random>
+#include <ratio>
+#include <regex>
+#include <scoped_allocator>
+#include <system_error>
+#include <thread>
+#include <tuple>
+#include <typeindex>
+#include <type_traits>
+#include <unordered_map>
+#include <unordered_set>
+#endif
+
+#if __cplusplus >= 201402L
+#include <shared_mutex>
+#endif
+endsnippet
+
+snippet namestd "using namespace std;" b
+using namespace std;
+endsnippet
+
+snippet graph_dirs "predefine graph dirs" b
+const vector<pair<int, int>> dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
+endsnippet
+
+snippet contest_header "predefined macro and header files" b
+#include <cstdio>
+#include <cstdlib>
+#include <iostream>
+#include <algorithm>
+#include <vector>
+#include <string>
+#include <stack>
+#include <cmath>
+#include <deque>
+#include <queue>
+#include <map>
+#include <bitset>
+#include <set>
+#include <list>
+#include <unordered_map>
+#include <unordered_set>
+#include <sstream>
+#include <numeric>
+#include <climits>
+#include <utility>
+#include <iomanip>
+#include <cassert>
+
+using namespace std;
+
+using ll = long long;
+using ii = pair<int, int>;
+using iii = pair<int, ii>;
+template<class T> using vv = vector<vector<T>>;
+
+#define rep(i, b) for (int i = 0; i < int(b); ++ i)
+#define reps(i, a, b) for (int i = int(a); i < int(b); ++ i)
+#define rrep(i, b) for (int i = int(b) - 1; i >= 0; -- i)
+#define rreps(i, a, b) for (int i = int(b) - 1; i >= a; -- i)
+#define repe(i, b) for (int i = 0; i <= int(b); ++ i)
+#define repse(i, a, b) for (int i = int(a); i <= int(b); ++ i)
+#define rrepe(i, b) for (int i = int(b); i >= 0; -- i)
+#define rrepse(i, a, b) for (int i = int(b); i >= int(a); -- i)
+
+#define all(a) a.begin(), a.end()
+#define rall(a) a.rbegin(), a.rend()
+#define sz(a) int(a.size())
+#define mp(a, b) make_pair(a, b)
+
+#define inf (INT_MAX / 2)
+#define infl (LONG_MAX / 2)
+#define infll (LLONG_MAX / 2)
+
+#define X first
+#define Y second
+#define pb push_back
+#define eb emplace_back
+
+// tools for pair<int, int> & graph
+template <class T, size_t M, size_t N>
+class graph_delegate_t {
+    T (&f)[M][N];
+
+public:
+    graph_delegate_t(T (&f)[M][N]) : f(f) {}
+    T& operator[](const ii& s) { return f[s.first][s.second]; }
+    const T& operator[](const ii& s) const { return f[s.first][s.second]; }
+};
+ii operator+(const ii& lhs, const ii& rhs) {
+    return mp(lhs.first + rhs.first, lhs.second + rhs.second);
+}
+
+// clang-format off
+template <class S, class T> ostream& operator<<(ostream& os, const pair<S, T>& t) { return os << "(" << t.first << "," << t.second << ")"; }
+template <class T> ostream& operator<<(ostream& os, const vector<T>& t) { os << "{"; rep(i, t.size() - 1) { os << t[i] << ","; } if (!t.empty()) os << t.back(); os << "}"; return os; }
+vector<string> __macro_split(const string& s) { vector<string> v; int d = 0, f = 0; string t; for (char c : s) { if (!d && c == ',') v.pb(t), t = ""; else t += c; if (c == '\"' || c == '\'') f ^= 1; if (!f && c == '(') ++d; if (!f && c == ')') --d; } v.pb(t); return v; }
+void __args_output(vector<string>::iterator, vector<string>::iterator) { cerr << endl; }
+template <typename T, typename... Args>
+void __args_output(vector<string>::iterator it, vector<string>::iterator end, T a, Args... args) { cerr << it->substr((*it)[0] == ' ', it->length()) << " = " << a; if (++it != end) { cerr << ", "; } __args_output(it, end, args...); }
+#define out(args...) { vector<string> __args = __macro_split(#args); __args_output(__args.begin(), __args.end(), args); }
+// clang-format on
+
+int main() {
+	return 0;
+}
+endsnippet
